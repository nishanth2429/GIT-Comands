to install github in ubuntu:

curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
sudo apt update
sudo apt install gh


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


To install GIT in Linux:
#yum install git
yes
Git is instalaton is done

#Afterward we need to config to GITHUB Account The code is attached by an immage.



gitid:nishanth2429
pass:Nishanth@242900
email:nishanthd383@gmail.com

#git config --global user.name "nishanth2429"

#git config --global user.email "nishanthd383@gmail.com"

#git config --global core.editor vim

#git config --global core.compression 2

#git config --global diff.tool vim.diff

To list : git config -l



#git remote add origin https://github.com/nishanth2429/Promethius-and-Graffana.git
#git pull orgin main -f
#git config -l ====>It is show the config histoy
#git remote add origin https://github.com/nishanth2429/Terraform.git
#mkdir mygit ====>it will create an working Directory
#cd mygit
#git init ====>it will create an local repositery
#vi sample
#git add sample =====>Moving to working directory to staging area
#git commit -m "1st" =====> To staging arrea to local repo
#git commit -am "2nd"======>without moaving staging area to directly to the local repo
#git diff =====> difference between working directoy to stagging area
#git diff --staged ====> difference between staging area to local repo
#git log --oneline ====> it will show the log of commit
#git blame sample(filename) ====>it will show the information about the line by line file who modified
#git show 5748bfh(commit id) ====>it will show the particular commit id information
#git branch =====>it will show in which branch currently we are in.
#git branch dev(feature branch name)====>it will create an feature branch 
#git checkout dev, #git checkout master ====>it will switch over to one branch to another branch.
#git merge dev ====>it merge the date master to dev


#git rebase master ====>it is rebase feature -->changes from one branch into another by rewriting the commit history.
a rebase does not create a new commit that combines the changes from both branches. 
Instead, it applies the changes from one branch onto another branch, creating a linear history.

#git cherry-pick eu6968(commit id) ====>it's cheery pick comment -->is used to apply a specific commit from one branch to another.


#git rm --cached main.txt ==>to remove a file from Git without deleting it from your filesystem.
#git branch -m <new_name> ==>to rename same branch.
#git branch -m <old_name> <new_name> ==> To rename a different branch

#git stash ==> temporarily stores your working directory's modifications, allowing you to switch branches without discarding your current progress.
#git stash pop ==> this command used to remove form stash store
#git stash apply ==> this command used to aplly continue to work progress.


HEAD` refers to the last commit on the current branch, `working tree` is the set of files in your directory, and `index` (or staging area) is a staging area for commits.

#git merge --squash ==> all commits from a specified feature branch into a single commit when merging into the target branch

#git pull http://uhje8575hv(paste link of repostery)
#git clone http://uhje8575hv(paste link of repostery) 
#git commit --amend ===>Changing the Last Commit: 
# git push --set-upstream origin master


Create an Branch from GUI
#git fetch
#git branch -a
#git checkout remotes/origin/UAT
#git push origin HEAD:UAT


merge using aws cli:
1.Need to do changes in master branch and push to github repo
2.switch to dev branch
3.merge to dev from master
4.push changes to gitrepo
 
commads:
git checkout master
git add <file_name>
git commit -m "initail commit"
git push origin master -f
git checkout dev
git merge dev master
git push origin dev -f


feature ---> develop (non-prod:dev,qa)
develop ---> rc(non-prod: uat)
 
rc ----> master(prod)
 
defect ---> hotfix(prod)
 
hotfix ---> master(prod)
